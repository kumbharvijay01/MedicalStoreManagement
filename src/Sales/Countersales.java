/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;

import DB.Dbconn;
import Report.ReportViewwithparam;
import Stock.Product_Information;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import medicalstoremanagement.*;
//import net.proteanit.sql.Dbutil;

/**
 *
 * @author user
 */
public class Countersales extends javax.swing.JInternalFrame {
Dbconn conn;
    PreparedStatement pst = null;
    Connection con = null;
    ResultSet rs = null;
     ResultSet rsd;
             String temp5,error;
 Statement st=null;
 String Sr_no,sr;
 String Date1;
 String Name,para;
 String Quantity;
 String PriceperUnit;
 String TotalAmount,prod_cat;
 String prodcutname,mrp,salesrate,vat;
 String productcategory;
 String srno;
 String sdate,pname,pcategory,totalqty,priceqty,totalamt,totalstock,temp;
 String tsdata;
 String counter_amount;
 String dt,counter_dt;
 int i,rowcount,colcount,j,row,cc,roww,srn,x,y,z;
 int pts,tqt;
 float ts,tq,a,b,c,counter_amountval,total_prodamt;
 ResultSet rs_date;
 TableRowSorter<TableModel> sorter;
   //  private String[] columnNames = {"Product Id", "Product Name", "Product Per Unit Price", "Quntity","Total"};
   
 
///int selectedRow = target.getSelectedRow();
  Product_Information Product_Informationobj;
        int index=1;
       // DefaultTableModel modelItem;
 
 DefaultTableModel modalItem,modalItem1;
/**
     * Creates new form attendance
     */
    JFrame frame = new JFrame();
    public Countersales(JFrame parent, boolean modal) {
        initComponents();
       
     //   show_date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date date = new java.util.Date();
        //System.out.println(dateFormat.format(date));
        jc_date.setText(dateFormat.format(date));
       
        
       
       // refreshTable();
         modalItem1=(DefaultTableModel)jCounter_sell_table.getModel();
         //refreshTable();
         product_table();
         jPanel5.setVisible(true);
          
       sorter = new TableRowSorter<TableModel>(modalItem);
       jproduct_tableinfo.setRowSorter(sorter);
      //String searchteaxt;
         jc_name.requestFocus();
    }
    public void refreshTable()
    {
      conn=new Dbconn();
       
       // modalItem1.setRowCount(0);
        try
        {
            temp=jc_date.getText();
            rs=conn.execute_query("select * from countersalesdata where countersale_date=? ", new String[]{temp});
            
            while (rs.next())
                
            {   
               // empid=rs.getString("employee_id");
               
                Sr_no=rs.getString("Sr_no");  
                Date1=rs.getString("countersale_date");
                Name=rs.getString("product_name");
                prod_cat = rs.getString("product_category");
                Quantity=rs.getString("product_quantity");
                PriceperUnit=rs.getString("perunitprice");
                TotalAmount=rs.getString("product_totalamount");
                System.out.print(Sr_no);
                
                modalItem1.addRow(new String[]{Sr_no, Date1, Name,prod_cat,Quantity,PriceperUnit, TotalAmount});
         

            }
            
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
     private void sortTable()
    {
        String searchteaxt;
        searchteaxt=jc_name.getText();
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" +searchteaxt));
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jc_priceperunit = new javax.swing.JTextField();
        jc_name = new javax.swing.JTextField();
        jc_date = new javax.swing.JTextField();
        jc_totalstock = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jproduct_tableinfo = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jc_clear = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jc_add = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jc_totalquantity = new javax.swing.JTextField();
        jc_totalamount = new javax.swing.JTextField();
        jc_totalcollection = new javax.swing.JTextField();
        jc_category = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jCounter_sell_table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jc_totlamount = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Counter Sales");
        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(1050, 550));
        setPreferredSize(new java.awt.Dimension(1350, 550));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setText("Counter Sale");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Counter Sale Details"));

        jc_priceperunit.setEditable(false);

        jc_name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jc_nameFocusLost(evt);
            }
        });
        jc_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jc_nameActionPerformed(evt);
            }
        });
        jc_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jc_nameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jc_nameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jc_nameKeyTyped(evt);
            }
        });

        jc_date.setEditable(false);

        jc_totalstock.setEditable(false);
        jc_totalstock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jc_totalstockActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel9.setText("Date");

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel10.setText("Name");

        jLabel11.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel11.setText("Total Quantity:");

        jLabel12.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel12.setText("Price Per Unit:");

        jLabel13.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel13.setText("TotalAmount:");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel2.setText("Total Stock:");

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel8.setText("Total Collection:");

        jproduct_tableinfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product_Name", "Product_category", "Sales_Rate", "Vat %", "M.R.P."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jproduct_tableinfo.getTableHeader().setResizingAllowed(false);
        jproduct_tableinfo.getTableHeader().setReorderingAllowed(false);
        jproduct_tableinfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jproduct_tableinfoMouseClicked(evt);
            }
        });
        jproduct_tableinfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jproduct_tableinfoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jproduct_tableinfo);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton4.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home icon.png"))); // NOI18N
        jButton4.setText("Home");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jc_clear.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jc_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Clear-icon.png"))); // NOI18N
        jc_clear.setText("Clear");
        jc_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jc_clearActionPerformed(evt);
            }
        });
        jc_clear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jc_clearKeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exitlicon.png"))); // NOI18N
        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jc_add.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jc_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add icon.png"))); // NOI18N
        jc_add.setText("Save");
        jc_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jc_addActionPerformed(evt);
            }
        });
        jc_add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jc_addKeyPressed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print-icon.png"))); // NOI18N
        jButton1.setText("View & Print");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jc_add, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jc_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jc_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jc_add, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel3.setText("Category:");

        jc_totalquantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jc_totalquantityKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jc_totalquantityKeyTyped(evt);
            }
        });

        jc_totalamount.setEditable(false);

        jc_totalcollection.setEditable(false);

        jc_category.setEditable(false);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add to card.png"))); // NOI18N
        jButton3.setText("ADD");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Remove from card.png"))); // NOI18N
        jButton5.setText("Remove");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jc_priceperunit, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                            .addComponent(jc_totalquantity)
                                            .addComponent(jc_totalstock)
                                            .addComponent(jc_totalamount)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jc_totalcollection, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel3))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jc_name, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                                    .addComponent(jc_date)
                                    .addComponent(jc_category))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jc_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jc_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jc_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jc_totalquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jc_priceperunit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(62, 62, 62))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jc_totalamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jc_totalstock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jc_totalcollection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Counter Sell Table"));

        jCounter_sell_table.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jCounter_sell_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr_no", "Date", "Name", "Category", "Quantity", "Unit Price", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jCounter_sell_table.getTableHeader().setResizingAllowed(false);
        jCounter_sell_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jCounter_sell_table);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel4.setText("Total Amount:");

        jc_totlamount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jc_totlamountFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jc_totlamount, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jc_totlamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(631, 631, 631)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jc_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jc_clearActionPerformed
      //jc_date.setText("");
      jc_name.setText("");
      jc_totalquantity.setText("");
      jc_category.setText("");
      jc_priceperunit.setText("");
      jc_totalstock.setText("");
      jc_totalamount.setText("");
      jc_totalquantity.setText("");
      jc_totlamount.setText("");
      modalItem1.setRowCount(0);  
    }//GEN-LAST:event_jc_clearActionPerformed

    private void jc_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jc_addActionPerformed

         rowcount = jCounter_sell_table.getRowCount();
          // colcount = jCounter_sell_table.getSelectedColumn();
           if(rowcount==-1)
           {
            JOptionPane.showMessageDialog(rootPane, "There Is no Row in Counter sell Table", "Error", JOptionPane.INFORMATION_MESSAGE);
           }
           
        i=JOptionPane.showConfirmDialog(null, "Are you Save This", "Conformation", JOptionPane.YES_NO_OPTION);
       if(i==JOptionPane.YES_OPTION)
      {
        
        srn=1;
        con=conn.getConnection();
        try
        {
         rs=conn.execute_query("select max(Sr_no)from countersalesdata where counter_status=?", new String[]{"ACTIVE"});
    
          while(rs.next())
          {
           
            sr=rs.getString("max(Sr_no)");
            System.out.print("max of sr no="+sr);
            sr=sr+1;
          }
       }
      catch(Exception ex)
      {
          //JOptionPane.showMessageDialog(null,ex);
          ex.printStackTrace();
      }
        //*******************************************end of max(srno)   
        
        
        
        
        conn=new Dbconn();
         try
        {
            // conn=new Dbconn();
            rowcount = jCounter_sell_table.getRowCount();
          // colcount = jCounter_sell_table.getSelectedColumn();
           if(rowcount==-1)
           {
            JOptionPane.showMessageDialog(rootPane, "There Is no Row in Counter sell Table", "Error", JOptionPane.INFORMATION_MESSAGE);
           }
           else
           {
              rowcount = jCounter_sell_table.getRowCount();
              colcount=jCounter_sell_table.getColumnCount();
              System.out.println("no of column in counter sell table="+rowcount);
             // conn=new Dbconn();
             for( row=0; row<rowcount;row++)
              {
                 srno=(String) jCounter_sell_table.getValueAt(row,0);
                 sdate=(String)jCounter_sell_table.getValueAt(row,1);
                 pname=(String) jCounter_sell_table.getValueAt(row,2);//raj 2 to 3 change
                 pcategory=(String)jCounter_sell_table.getValueAt(row,3);
                 totalqty=(String) jCounter_sell_table.getValueAt(row,4);
                 priceqty= (String) jCounter_sell_table.getValueAt(row,5);
                 totalamt=(String) jCounter_sell_table.getValueAt(row,6);
          
                  System.out.println(srno);
                  System.out.println(sdate);
                  System.out.println(pname);
                  System.out.println(pcategory);   
                  System.out.println(totalqty);
                  System.out.println(priceqty);
                  System.out.println(totalamt);
             //i =conn.insert_data("insert into countersalesdata VALUES(?,?,?,?,?,?,?,?)",new String[]{srno,sdate,pname,pcategory,totalqty,priceqty,totalamt,"ACTIVE"});
               
               try
              {
                conn=new Dbconn();
                i =conn.insert_data("insert into countersalesdata VALUES(?,?,?,?,?,?,?,?)",new String[]{srno,sdate,pname,pcategory,totalqty,priceqty,totalamt,"ACTIVE"});
             
                System.out.println("data is inserted");
               }
                catch(Exception ex)
                {
                 JOptionPane.showMessageDialog(rootPane, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
           // }//end for loop
            if (i > 0) 
            {
               JOptionPane.showMessageDialog(rootPane, "Data saved Sucessfully.","Save",JOptionPane.INFORMATION_MESSAGE);
               
                // modalItem1.setRowCount(0);
                 //jc_totlamount.setText("");
             } 
            else 
            {
               JOptionPane.showMessageDialog(rootPane, "Data not save","Error.",JOptionPane.ERROR_MESSAGE);
            }   
              
         // }//ens of else block
        
      
         
                  
     conn=new Dbconn();
     // String dt,counter_dt="";
      dt = jc_date.getText();
      counter_amount=0+"";
     // ResultSet rs_date;
      rs_date = conn.execute_query("select MAX(countersale_date) from countercollection where status=?",new String[]{"ACTIVE"});
        try 
        {
            
            while(rs_date.next())
            {
               counter_dt = rs_date.getString("MAX(countersale_date)");            
            }
            
            //conn=new Dbconn();
            rs=conn.execute_query("select counter_totalcollection from countercollection where countersale_date=?",new String[]{counter_dt});
            while(rs.next())
            {
               counter_amount=rs.getString("counter_totalcollection"); 
               System.out.println("total counter collection before is="+counter_amount);
             
//               if(counter_amount.equals("0"))
//               {
                 counter_amountval=Float.parseFloat(counter_amount);
                 totalamt=(String) jCounter_sell_table.getValueAt(row,6);
                 total_prodamt=Float.parseFloat(totalamt);
                 System.out.println("total product amount is="+total_prodamt);
                 counter_amountval=counter_amountval+total_prodamt;
                 System.out.println("Total counter collecton after in="+counter_amountval);
                 
                 
                  System.out.println("Total counter collecton after in="+counter_amountval); 
                
                  System.out.print("\n \n \n System Date = "+dt);
                  System.out.print("\n \n \n Max Date    = "+counter_dt);
                  if(dt.equals(counter_dt))
                  {
            
                   j = conn.update_data("update countercollection set counter_totalcollection=? where countersale_date=?", new String[]{""+counter_amountval,dt});
        
            
                   // JOptionPane.showMessageDialog(null, "counter collection update successful");
                  }
                  else
                  {
           
                     i=conn.insert_data("insert into countercollection(countersale_date,counter_totalcollection,status)values (?,?,?)", new String[]{jc_date.getText(),
                         counter_amountval+"","ACTIVE"});
         
                   }
                 
//               }//end of if block
//               else
//               {
//                 counter_amountval=Integer.parseInt(counter_amount);
//                 totalamt=(String) jCounter_sell_table.getValueAt(row,6);
//                 total_prodamt=(int)Integer.parseInt(totalamt);
//                 counter_amountval=counter_amountval+Math.abs(total_prodamt);
//                
//                 System.out.println("Total counter collecton after in="+counter_amountval); 
//                
//                 System.out.print("\n \n \n System Date = "+dt);
//                 System.out.print("\n \n \n Max Date    = "+counter_dt);
//                 
//                 if(dt.equals(counter_dt))
//                  {
//            
//                   j = conn.update_data("update countercollection set counter_totalcollection=? where countersale_date=?", new String[]{counter_amountval+"",dt});
//        
//            
//                   JOptionPane.showMessageDialog(null, "counter collection update successful");
//                  }
//                 else
//                  {
//           
//                     i=conn.insert_data("insert into countercollection(countersale_date,counter_totalcollection,status)values (?,?,?)", new String[]{jc_date.getText(),
//                            jc_totalcollection.getText(),"ACTIVE"});
//         
//                  }
//               
//                }//end of else block
           }//end of while
        } 
        catch (Exception ex)
        {
            Logger.getLogger(Countersales.class.getName()).log(Level.SEVERE, null, ex);
        }
       
//        System.out.print("\n \n \n System Date = "+dt);
//        System.out.print("\n \n \n Max Date    = "+counter_dt);
//       if(dt.equals(counter_dt))
//        {
//            
//            j = conn.update_data("update countercollection set counter_totalcollection=? where countersale_date=?", new String[]{counter_amountval+"",dt});
//        
//            
//             JOptionPane.showMessageDialog(null, "counter collection update successful");
//        }
//        else
//        {
//         
//          i=conn.insert_data("insert into countercollection(countersale_date,counter_totalcollection,status)values (?,?,?)", new String[]{jc_date.getText(),
//                            jc_totalcollection.getText(),"ACTIVE"});
//         
//        }
         
       //******************************************update counter collection END*******************************  
      

        //********************************product update code
                
         
             pname=(String) jCounter_sell_table.getValueAt(row,2);
             totalqty=(String) jCounter_sell_table.getValueAt(row,4);
             rs=conn.execute_query("select totalstock from product_info where product_name=? ", new String[]{pname});
           while(rs.next())
          {
            tsdata=rs.getString("totalstock");
           
          }
            pts=Integer.parseInt(tsdata);
            tqt=Integer.parseInt(totalqty);
            pts=pts-tqt;
            System.out.println("new stock of product is="+pts); 
 
          try
         {
              j = conn.update_data("update  product_info set totalstock=? where product_name=?", new String[]{pts+"",pname});
             
                  //jc_totalstock.setText(rs.getString("totalstock"));
                  System.out.print("Data is updated successfulyrun");
                 // JOptionPane.showMessageDialog(null, "Product update successful");

              
         }
         catch(Exception ex)
         {
             ex.printStackTrace();
         }
          //****************************product update END******************
      
          
          
       }//end of for loop
        modalItem1.setRowCount(0);
        jc_totlamount.setText("");
        try
        {
            // conn=new Dbconn();
             rs=conn.execute_query("select counter_totalcollection from countercollection where status=?",new String[]{"ACTIVE"});
            while(rs.next())
            {
               jc_totalcollection.setText(rs.getString("counter_totalcollection")) ;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
     }//end of first else block
           
      }//end of first catch
        catch(Exception e)
                {
                System.out.println(e);
                }
    
      }
    else
    {
        
    }
    
    }//GEN-LAST:event_jc_addActionPerformed

    private void jc_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_nameKeyPressed

// 
//        
//        
//        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
//       {
//          conn=new Dbconn();
//         rs=conn.execute_query("select Actual_price from product_info where product_name=?", new String[]{jc_name.getText()});
//      try
//      {
//         while(rs.next())
//       {
//           jc_priceperunit.setText(rs.getString("Actual_price"));
//           System.out.print("run");
//       }
//       }
//      catch(Exception ex)
//      {
//          ex.printStackTrace();
//      }
//       }
       
       
    }//GEN-LAST:event_jc_nameKeyPressed

    private void jc_nameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jc_nameFocusLost

// conn=new Dbconn();
//   rs=conn.execute_query("select totalstock from product_info where product_name=?", new String[]{jc_name.getText()});
//      try
//     {
//       while(rs.next())
//       {
//           jc_totalstock.setText(rs.getString("totalstock"));
//        //   System.out.print("run");
//       }
//       }
//      catch(Exception ex)
//      {
//          ex.printStackTrace();
//     }
           
     
    }//GEN-LAST:event_jc_nameFocusLost
    
    private void jc_addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_addKeyPressed
   if(evt.getKeyCode()==KeyEvent.VK_ENTER)
   {
       conn=new Dbconn();
        int valid = 0;
        String str = "";

        if (jc_name.getText().equals("")) {
            str += "\n Plaese fill product Name !";
            valid = 1;
        }
          if (jc_category.getText().equals("")) {
            str += "\n Plaese fill product Category !";
            valid = 1;
        }
             if (jc_totalquantity.getText().equals("")) {
            str += "\n Plaese fill quntity !";
            valid = 1;
            
        }
             if(valid==1)
             {
                 JOptionPane.showMessageDialog(null, str);
             }
             else
             {
                 String pc=jc_category.getText();
                 if(pc.equals("H1"))
                 {
                      JOptionPane.showMessageDialog(null, "This Product is under H1 category .Dont sell withought Doctor prescription and Please fill the Customer Details first..", "Error", JOptionPane.ERROR_MESSAGE);
                     jc_category.setText("");
                 }//end of if h1
                
                 else
                 {
                     System.out.println("inside check h1 else block");
                      try
                     {
                        // String sdate,pname,pcategory,totalqty,priceqty,totalamt,totalstock;
                         
                         sdate=jc_date.getText();
                         pname= jc_name.getText();
                         pcategory=jc_category.getText();
                         totalqty=jc_totalquantity.getText();
                         priceqty=jc_priceperunit.getText();
                         totalamt=jc_totalamount.getText();        
                         
                    // int i=conn.insert_data("insert into countersalesdata(countersale_date,product_name,product_quantity,perunitprice,product_totalamount,counter_status)values(?,?,?,?,?,?)", new String[]{"abc","kjjk","adasd","asdf","asdf","asdf"});
                  i=conn.insert_data("insert into countersalesdata(countersale_date,product_name,product_category,"
                        + "product_quantity,perunitprice,product_totalamount,counter_status)values(?,?,?,?,?,?,?)", new String[]{sdate,pname,pcategory,totalqty,priceqty,totalamt ,"ACTIVE"});
                         
                // refreshTable();
                  System.out.println("data is inserted");
                  System.out.println(i);
                  
                   }catch(Exception e)
                     {
                         System.out.println(e);
                     }
                    
                    if (i > 0)
                 {
                        JOptionPane.showMessageDialog(rootPane, "Data save");
                         sdate=jc_date.getText();
                         pname= jc_name.getText();
                         pcategory=jc_category.getText();
                         totalqty=jc_totalquantity.getText();
                         priceqty=jc_priceperunit.getText();
                         totalamt=jc_totalamount.getText(); 
                         
                         System.out.println(pname);
                         System.out.println(pcategory);
                         System.out.println(priceqty);
                
                  modalItem1=(DefaultTableModel)jCounter_sell_table.getModel();
                 // modelItem1.setRowCount(0);
                  modalItem1.addRow(new String[]{sdate,pname,pcategory,totalqty,priceqty,totalamt});
                 
            }
            else
            {
                System.out.println("in else block");
                JOptionPane.showMessageDialog(rootPane, "Data not save");
            } 
              jc_category.setText("");
                 }
                 
    }
             refreshTable();
               ///sum of coloum
             Dbconn conn=new Dbconn();
        con=conn.getConnection();
      try
      {
       rs=conn.execute_query("select sum(product_totalamount)from countersalesdata where countersale_date=?", new String[]{jc_date.getText()});
    //String sql= "select sum(product_totalamount) from countersalesdata";
         // pst=con.prepareStatement(sql);
        // rs=pst.executeQuery();
          while(rs.next())
       {
           
           String sum=rs.getString("sum(product_totalamount)");
         // System.out.print(sum);
           jc_totalcollection.setText(sum);
       }
       }
      catch(Exception ex)
      {
          //JOptionPane.showMessageDialog(null,ex);
      }
         conn=new Dbconn();
      String dt,counter_dt="";
      dt = jc_date.getText();
      ResultSet rs_date;
      rs_date = conn.execute_query("select MAX(countersale_date) from countercollection where status=?",new String[]{"ACTIVE"});
        try 
        {
            while(rs_date.next())
            {
               counter_dt = rs_date.getString("MAX(countersale_date)");            
            }
        } 
        catch (Exception ex)
        {
            Logger.getLogger(Countersales.class.getName()).log(Level.SEVERE, null, ex);
        }
//        System.out.print("\n \n \n System Date = "+dt);
//        System.out.print("\n \n \n Max Date    = "+counter_dt);
        if(dt.equals(counter_dt))
        {
           
            j = conn.update_data("update countercollection set counter_totalcollection=? where countersale_date=?", new String[]{jc_totalcollection.getText(),dt});
        
        }
        else
        {
         
          i=conn.insert_data("insert into countercollection(countersale_date,counter_totalcollection,status)values (?,?,?)", new String[]{jc_date.getText(),
                            jc_totalcollection.getText(),"ACTIVE"});
         
        }
         
         
      //product update code
         int a,d,e;
         a=Integer.parseInt(jc_totalquantity.getText());
         d=Integer.parseInt(jc_totalstock.getText());
         e=d-a;
   
         jc_totalstock.setText(String.valueOf(e));
         String value1=jc_totalstock.getText();
         String value2=jc_name.getText();
        //rs=conn.execute_query("update  product_info set totalstock='"+value1+"' where product_name=? ", new String[]{jc_name.getText()});
        
         j = conn.update_data("update  product_info set totalstock=? where product_name=?", new String[]{value1,value2});
         try
         {
              while(rs.next())
              {
                  jc_totalstock.setText(rs.getString("totalstock"));
                  System.out.print("run");

              }
         }
         catch(Exception ex)
         {
             ex.printStackTrace();
         }
  //clear text//////////
       if(evt.getSource()==jc_add)
        {jc_name.setText("");
         jc_totalquantity.setText("");
   
        }
       jc_priceperunit.setText("");
      jc_totalamount.setText("");
      jc_totalstock.setText("");
   }
    }//GEN-LAST:event_jc_addKeyPressed

    private void jc_clearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_clearKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER)
       {
         jc_name.setText("");
      jc_totalquantity.setText("");
      jc_priceperunit.setText("");
      jc_totalamount.setText("");
      jc_totalstock.setText("");  
       }
    }//GEN-LAST:event_jc_clearKeyPressed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
  
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
         new index().setVisible(true);
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void jc_totalstockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jc_totalstockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jc_totalstockActionPerformed

    private void jc_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jc_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jc_nameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//jPanel4.setVisible(true);
ResultSet rs;
conn=new Dbconn();
rs=conn.execute_query("select MAX(Sr_no) from countersalesdata where counter_status=?", new String[]{"ACTIVE"});
try
{
  
while(rs.next())
{
    
    ReportViewwithparam r=new ReportViewwithparam();
    String filename;
    int temp;
    filename="Reports/CounterSaleBill.jrxml";
   temp= Integer.parseInt(rs.getString("MAX(Sr_no)"));
    
   System.out.print(temp);
        r.generate(filename,temp);
  }
}
catch (Exception ex)
{
    JOptionPane.showMessageDialog(rootPane, "Contact To Service Provider", "Error", JOptionPane.ERROR_MESSAGE);
}

        

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(evt.getClickCount()==2)
            
        {
       jPanel5.setVisible(true);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jproduct_tableinfoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jproduct_tableinfoKeyPressed
  
        String a;
     
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
      {
          int row = 0;
            rowcount =jproduct_tableinfo.getSelectedRow();
           colcount = jproduct_tableinfo.getSelectedColumn();
       // DefaultTableModel model;
                   //  row_count =1
//        {
                try
                {      
                    
                   
                        a = (String) jproduct_tableinfo.getValueAt(row, 0);
////                        b = (String) jsale_producttable.getValueAt(row, 1);
////                        c = (String)jsale_producttable.getValueAt(row, 2);
////                          d = (String)jsale_producttable.getValueAt(row, 3);
                           // e = (String)jsale_producttable.getValueAt(row, 4);
                    
                        //int n =JOptionPane.showConfirmDialog(rootPane, "Aru you sure? \n You want to save Data?", "Confirm!", JOptionPane.YES_NO_OPTION);
                       
                      //  conn = new Dbconn();
                       jc_name.setText(a);
                      //  model.setRowCount(index);
                        try
                        {
                            
                        //   model.addRow(new String[]{a});
                              //index++;
                                      
                        }
    catch(Exception ex)
    {
        JOptionPane.showMessageDialog(rootPane, ex, "Error", JOptionPane.ERROR_MESSAGE);
    }
                        
                }       
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, e,"Error", JOptionPane.ERROR_MESSAGE);
                } 
      }
    }//GEN-LAST:event_jproduct_tableinfoKeyPressed

    private void jc_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_nameKeyReleased
      // TODO add your handling code here:
    }//GEN-LAST:event_jc_nameKeyReleased

    private void jc_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_nameKeyTyped
 sortTable();          // TODO add your handling code here:
    }//GEN-LAST:event_jc_nameKeyTyped

    private void jproduct_tableinfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jproduct_tableinfoMouseClicked
      if (evt.getClickCount() == 1)  
                {  
                     String selectedData = null;  
                   JTable target = (JTable)evt.getSource();  
               int selectedRow = target.getSelectedRow();
               Object selectedCellValue=target.getValueAt(selectedRow, 0); 
               System.out.println(selectedCellValue);
               jc_name.setText(selectedCellValue.toString());
                }
      //Getting product category
      
        conn=new Dbconn();
      rs=conn.execute_query("select product_category from product_info where product_name=?", new String[]{jc_name.getText()});
      try
     {
         while(rs.next())
       {
           jc_category.setText(rs.getString("product_category"));
        //   System.out.print("run");
       }
       }
      catch(Exception ex)
      {
          ex.printStackTrace();
     }
      
      //*******************************end product category************************************
      
        //Product unit per price coding
      
       conn=new Dbconn();
      rs=conn.execute_query("select Actual_price from product_info where product_name=?", new String[]{jc_name.getText()});
      try
     {
         while(rs.next())
       {
           jc_priceperunit.setText(rs.getString("Actual_price"));
        //   System.out.print("run");
       }
       }
      catch(Exception ex)
      {
          ex.printStackTrace();
     }
      //**************************************************************************
      //getting total stack coding
       conn=new Dbconn();
       rs=conn.execute_query("select totalstock from product_info where product_name=?", new String[]{jc_name.getText()});
      try
     {
       while(rs.next())
       {
           jc_totalstock.setText(rs.getString("totalstock"));
        //   System.out.print("run");
       }
       }
      catch(Exception ex)
      {
          ex.printStackTrace();
     }
      jc_totalquantity.requestFocus();
     // *************************************end of total stock**************************************
    }//GEN-LAST:event_jproduct_tableinfoMouseClicked

    private void jc_totalquantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_totalquantityKeyTyped
//        totalqty=jc_totalquantity.getText();
//        totalstock=jc_totalstock.getText();
//         tq=Float.parseFloat(totalqty);
//         ts=Float.parseFloat(totalstock);
//         if(tq>ts)
//         {
//            JOptionPane.showMessageDialog(null, "Please Enter the Quantity less than TotalStock", "Error", JOptionPane.ERROR_MESSAGE);
//            jc_totalquantity.setText("");
//            jc_totalamount.setText("");
//         }
//         jc_totalquantity.requestFocus();
//         
//         
//      
//        conn=new Dbconn();
//        {
//    
//         // float a,b,c;
//   a=Float.parseFloat(jc_totalquantity.getText());
//   b=Float.parseFloat(jc_priceperunit.getText());
//   c=a*b;
//   jc_totalamount.setText(""+c);
//  // jc_totalamount.setText(String.valueOf(c));
//  }

    }//GEN-LAST:event_jc_totalquantityKeyTyped

    private void jc_totalquantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jc_totalquantityKeyReleased
        // TODO add your handling code here:
         totalqty=jc_totalquantity.getText();
         totalstock=jc_totalstock.getText();
         tq=Float.parseFloat(totalqty);
         ts=Float.parseFloat(totalstock);
         if(ts<=0)
         {
             
             conn=new Dbconn();
            
             temp5=jc_name.getText();
            rsd=conn.execute_query("select * from substituemaster where productname=? and status=?", new String[]{temp5,"ACTIVE"});
           try
           {
            while(rsd.next())
            {
                error=rsd.getString("subname");
            }
           }
           catch(Exception ex)
           {
               
           }
             
              JOptionPane.showMessageDialog(null, "Product is Out Of Stock "+"Substitute Medicine := "+error, "", JOptionPane.INFORMATION_MESSAGE);
          
         }
         if((tq>ts))//Check the total quantity is less than stock
         {
            JOptionPane.showMessageDialog(null, "Please Enter the Quantity less than TotalStock", "Error", JOptionPane.ERROR_MESSAGE);
            jc_totalquantity.setText("");
            jc_totalamount.setText("");
         }
         
         jc_totalquantity.requestFocus();
         
         
      
        conn=new Dbconn();
        {
          totalqty=jc_totalquantity.getText();
         
          a=Float.parseFloat(totalqty);
          b=Float.parseFloat(jc_priceperunit.getText());
          c=a*b;
          jc_totalamount.setText(c+"");
  
  }

    }//GEN-LAST:event_jc_totalquantityKeyReleased
//ADD Button mouse click event fire********************************************************
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        srn=0;
         conn=new Dbconn();
        int valid = 0;
        String str = "";

        if (jc_name.getText().equals("")) {
            str += "\n Plaese fill product Name !";
            valid = 1;
        }
          if (jc_category.getText().equals("")) {
            str += "\n Plaese fill product Category !";
            valid = 1;
        }
             if (jc_totalquantity.getText().equals("")) {
            str += "\n Plaese fill quntity !";
            valid = 1;
            
        }
             if(valid==1)
             {
                 JOptionPane.showMessageDialog(null, str);
             }
             else
             {
                 String pc=jc_category.getText();
                 if(pc.equals("H1"))
                 {
                      JOptionPane.showMessageDialog(null, "This Product is under H1 category .Dont sell withought Doctor prescription and Please fill the Customer Details first..", "Error", JOptionPane.ERROR_MESSAGE);
                      jc_name.setText("");
                      jc_totalquantity.setText("");
                      jc_category.setText("");
                      jc_priceperunit.setText("");
                      jc_totalstock.setText("");
                      jc_totalamount.setText("");
                      jc_totalquantity.setText("");
                 }//end of if h1
                
                 else
                 {
                     System.out.println("inside check h1 else block");
                      try
                     {
                         conn=new Dbconn();
                         rs=conn.execute_query("select max(Sr_no) from countersalesdata where counter_status=? ", new String[]{"Active"});
                          while(rs.next())
                          {
                             srno=rs.getString("max(Sr_no)");
                             srn=Integer.parseInt(srno);
                             srn=srn+1;
                             System.out.println("max serial no is="+srn);
                          }
                     }catch(Exception e)
                       {
                         System.out.println(e);
                        }
       
                         sdate=jc_date.getText();
                         pname= jc_name.getText();
                         pcategory=jc_category.getText();
                         totalqty=jc_totalquantity.getText();
                         priceqty=jc_priceperunit.getText();
                         totalamt=jc_totalamount.getText();        
                          
                  //  modalItem1.setRowCount(0);
                    modalItem1.addRow(new String[]{srn+"",sdate,pname,pcategory,totalqty,priceqty,totalamt});
                    
                  //clear the text boxes 
                   jc_name.setText("");
                   jc_totalquantity.setText("");
                   jc_category.setText("");
                   jc_priceperunit.setText("");
                   jc_totalstock.setText("");
                   jc_totalamount.setText("");
                   jc_totalquantity.setText("");
                 }
             }
        
    }//GEN-LAST:event_jButton3MouseClicked
//Remove button mouse click event***********************************************
    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        
         DefaultTableModel model1;
        try
        {
           rowcount = jCounter_sell_table.getSelectedRow();
          // colcount = jCounter_sell_table.getSelectedColumn();
        if(rowcount==-1)
        {
            JOptionPane.showMessageDialog(rootPane, "There Is no Row in Counter sell Table", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
          
          model1=(DefaultTableModel)jCounter_sell_table.getModel();
           cc=JOptionPane.showConfirmDialog(null, "Are you Confirm to remove this product", "Error", JOptionPane.YES_NO_OPTION);
          if(cc==0)
          {
          model1.removeRow(rowcount);
          jc_totlamount.requestFocus();
         }
          else
          {
              
          }
        }
        catch(Exception e)
        {
           // JOptionPane.showMessageDialog(rootPane, "Select the row From Expiry Table...","Error.....", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton5MouseClicked

    private void jc_totlamountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jc_totlamountFocusGained
        // TODO add your handling code here:
        
        int r=jCounter_sell_table.getRowCount();
        String n1;
           float sum1 =0,j1;
        // int c1=jsale_addproduct.getColumnCount();
              //  JOptionPane.showMessageDialog(rootPane, r, "Rows",JOptionPane.ERROR_MESSAGE);
       // JOptionPane.showMessageDialog(rootPane, c, "Columns", JOptionPane.ERROR_MESSAGE);
       
        for( roww=0; roww<r;roww++)
        {
         String producttoatalamount;
         producttoatalamount = (String) jCounter_sell_table.getValueAt(roww,6);
      
               j1=Float.parseFloat((String)producttoatalamount);
               sum1=sum1+j1;
                n1=""+sum1;                
           //jc_totlamount.setText(String.valueOf(n1)); 
         jc_totlamount.setText(n1);        
        }
      

        
    }//GEN-LAST:event_jc_totlamountFocusGained

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
//******************************************************************************
    public void product_table()
{
    modalItem=(DefaultTableModel)jproduct_tableinfo.getModel();
      conn=new Dbconn();
       
        modalItem.setRowCount(0);
        try
        {
           // String temp=jc_date.getText();
            rs=conn.execute_query("select * from product_info where productstatus=? ", new String[]{"Active"});
            
            while (rs.next())
                
            {   
            // productid=rs.getString("product_id");
             prodcutname=rs.getString("product_name");
             productcategory=rs.getString("product_category");
            // discount=rs.getString("sale_discount");
            mrp=rs.getString("Actual_price");
             vat=rs.getString("product_vat");
           salesrate  =rs.getString("product_rateperunit");
        //  total_stock=rs.getString("totalstock");
//                Sr_no=rs.getString("Sr_no");  
//                Date1=rs.getString("countersale_date");
//                Name=rs.getString("product_name");
//                Quantity=rs.getString("product_quantity");
//                PriceperUnit=rs.getString("perunitprice");
//                TotalAmount=rs.getString("product_totalamount");
                modalItem.addRow(new String[]{prodcutname,productcategory,salesrate,vat,mrp});
         

            }
        }
        
            catch(Exception e)
                    {
                    
                    }
}
    
    
//    public void show_date()
//    {
//    Calendar c1=new GregorianCalendar();
//      
//     int month=c1.get(Calendar.MONTH);
//        int day=c1.get(Calendar.DAY_OF_MONTH);
//        int year=c1.get(Calendar.YEAR);
//        jc_date.setText(year+"/"+(month+1)+"/"+day);
//        
//    }
    ///*****refreshfrom********************///////////////////////////
    public void refreshForm(Object cellvalue)
            
    {
        Dbconn conn=new Dbconn();
        con=conn.getConnection();
        ResultSet rs;
        try
        {
           
            Statement st=con.createStatement();
            rs=st.executeQuery("select * from countersalesdata where Sr_no="+cellvalue);
            while(rs.next())
            {
                System.out.print("countersale_date");
               
             //  jc_date.setText(rs.getString("countersale_date"));
                jc_name.setText(rs.getString("product_name"));
                jc_category.setText(rs.getString("product_category"));
                jc_totalquantity.setText(rs.getString("product_quantity"));
                jc_priceperunit.setText(rs.getString("perunitprice"));
                jc_totalamount.setText(rs.getString("product_totalamount"));
              
             }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
        
     
         
     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JTable jCounter_sell_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jc_add;
    private javax.swing.JTextField jc_category;
    private javax.swing.JButton jc_clear;
    private javax.swing.JTextField jc_date;
    private javax.swing.JTextField jc_name;
    private javax.swing.JTextField jc_priceperunit;
    private javax.swing.JTextField jc_totalamount;
    private javax.swing.JTextField jc_totalcollection;
    private javax.swing.JTextField jc_totalquantity;
    private javax.swing.JTextField jc_totalstock;
    private javax.swing.JTextField jc_totlamount;
    private javax.swing.JTable jproduct_tableinfo;
    // End of variables declaration//GEN-END:variables
}
